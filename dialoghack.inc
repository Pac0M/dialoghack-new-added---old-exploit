////- Reutilicen el codigo (Adaptenlo a su gamemode).
//// Condicional agregada para evitar datos de entrada falsos

#include <a_samp> 
#define green 0x33FF33AA
static lastDialogID[MAX_PLAYERS] = { -1, ... };  
 
 
stock ADH_ShowPlayerDialog(playerid, dialogid, style, caption[], info[], button1[], button2[]) {
  lastDialogID[playerid] = dialogid;
  ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}
stock DialogExploit(message[])
{
   new message_length = strlen(message);
   for(new i; i < message_length; i++)
   {
      if(message[i] == '%' || message[i] == '=')
      {
      return 1;
      }
   }
   return 0;
}
stock DialogExploit2(message[])
{
   new message_length = strlen(message);
   for(new i; i < message_length; i++)
   {
      if(message[i] == '#')
      {
      return 1;
      }
   }
   return 0;
}
public OnPlayerConnect(playerid) {
  lastDialogID[playerid] = -1;
  #if defined ADH_OnPlayerConnect 
    return CallRemoteFunction("ADH_OnPlayerConnect", "i", playerid);
  #else
    return 1;
  #endif  
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) {
  
  //CONDICIONAL 
     if (DialogExploit(inputtext)) return SendClientMessage(playerid, green, "No esta permitido usar esta clase de simbolos en los dialogos."); //Condicional de restricción (exploit = % #)
   if (DialogExploit2(inputtext)) return SendClientMessage(playerid, green, "No esta permitido usar esta clase de simbolos en los dialogos."); //Condicional de restricción (exploit = % #)
 
  if (lastDialogID[playerid] != dialogid) { 
    lastDialogID[playerid] = -1;
    #if defined OnDialogHackDetected
      CallRemoteFunction("OnDialogHackDetected", "i", playerid);
    #endif
    return 1;
  } else { 
    lastDialogID[playerid] = -1;
    #if defined ADH_OnDialogResponse
      if (inputtext[0])
        return CallRemoteFunction("ADH_OnDialogResponse", "iiiis", playerid, dialogid, response, listitem, inputtext);
      else 
        return CallRemoteFunction("ADH_OnDialogResponse", "iiiis", playerid, dialogid, response, listitem, "\1");
    #else
      return 0;
    #endif
  }  
}


#if defined _ALS_ShowPlayerDialog 
  #undef ShowPlayerDialog
#else
  #define _ALS_ShowPlayerDialog
#endif

#if defined _ALS_OnDialogResponse 
  #undef OnDialogResponse
#else
  #define _ALS_OnDialogResponse
#endif

#if defined _ALS_OnPlayerConnect 
  #undef OnPlayerConnect
#else
  #define _ALS_OnPlayerConnect
#endif

#define ShowPlayerDialog ADH_ShowPlayerDialog 
#define OnDialogResponse ADH_OnDialogResponse 
#define OnPlayerConnect  ADH_OnPlayerConnect  

#if defined OnDialogHackDetected
  forward OnDialogHackDetected(playerid);
#endif
#if defined ADH_OnDialogResponse
  forward ADH_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
#endif
#if defined ADH_OnPlayerConnect
  forward ADH_OnPlayerConnect(playerid);
#endif
